#include "../header-vmdl/patterns.vmdh"

#include "../header-vmdl/externc.vmdh"


(needContext, makeInline) object_to_primitive : (JSValue, cint) -> JSValue
object_to_primitive(v, hint){
    top: match(v){
        case(object v){
            JSValue fst = (hint == HINT_STRING) ? gconsts.g_string_tostring : gconsts.g_string_valueof;
            JSValue snd = (hint == HINT_STRING) ? gconsts.g_string_valueof : gconsts.g_string_tostring;
            JSValue f1 = get_prop_prototype_chain(v, fst);
            if(f1 != JS_UNDEFINED){
                GC_PUSH(v);
                GC_PUSH(snd);
                toStringLevel: match(f1){
                    case(Function f1){
                        JSValue invoked = invoke_function0(v, f1, true);
                        GC_POP(snd);
                        GC_POP(v);
                        invokedFunction: match(invoked){
                            case(primitive invoked){
                                return invoked;
                            }
                        }
                    }
                    case(Builtin f1){
                        JSValue invoked = invoke_builtin0(v, f1, true);
                        GC_POP(snd);
                        GC_POP(v);
                        invokedBuiltin: match(invoked){
                            case(primitive invoked){
                                return invoked;
                            }
                        }
                    }
                    case(true){
                        GC_POP(snd);
                        GC_POP(v);
                    }
                }
            }
            JSValue f2 = get_prop_prototype_chain(v, snd);
            if(f2 != JS_UNDEFINED){
                toStringLevel: match(f2){
                    case(Function f2){
                        JSValue invoked = invoke_function0(v, f2, true);
                        invokedFunction: match(invoked){
                            case(primitive invoked){
                                return invoked;
                            }
                        }
                    }
                    case(Builtin f2){
                        JSValue invoked = invoke_builtin0(v, f2, true);
                        invokedBuiltin: match(invoked){
                            case(primitive invoked){
                                return invoked;
                            }
                        }
                    }
                }
            }
            type_error_exception("neither to_string nor valueOf returned a string in object_to_primitive");
            return JS_UNDEFINED;
        }
        case(true){
            type_error("object expected in object_to_primitive");
            return JS_UNDEFINED;
        }
    }
}