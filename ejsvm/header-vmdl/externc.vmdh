externC constant JS_TRUE = "JS_TRUE" : Special
externC constant JS_FALSE = "JS_FALSE" : Special
externC constant JS_NULL = "JS_NULL" : Special
externC constant JS_UNDEFINED = "JS_UNDEFINED" : Special
externC constant FIXNUM_ZERO = "FIXNUM_ZERO" : Fixnum
externC constant FIXNUM_ONE = "FIXNUM_ONE" : Fixnum
externC constant EMPTY_CSTRING = "\"\"" : cstring
externC constant EMPTY_JSVALUE = "JS_NULL" : JSValue
externC constant HINT_STRING = "HINT_STRING" : cint
externC constant NAN = "NAN" : cdouble
externC constant SUCCESS = "SUCCESS" : cint

externC cint_to_double : cint -> cdouble
externC double_to_cint : cdouble -> cint
externC fixnum_to_cint : Fixnum -> cint
externC cint_to_string : cint -> String
externC double_to_string : cdouble -> String
externC double_to_number : cdouble -> Number
externC double_to_flonum : cdouble -> Flonum
externC flonum_to_double : Flonum -> cdouble
externC (needContext) array_to_string : (Array, String) -> String
externC string_to_cstr: String -> cstring
externC (needContext, triggerGC) Object_to_primitive_hint_number: JSObject -> JSValue
externC flonum_to_cint : Flonum -> cint
externC (triggerGC) cint_to_number : cint -> Number
externC (triggerGC) cint_to_fixnum : cint -> Fixnum
externC (needContext, triggerGC) concat : (String, String) -> String
externC (triggerGC) fixnum_to_double : Fixnum -> cdouble
externC CstrToString : cstring -> String
externC (needContext, triggerGC) getArrayProp: (Array, JSValue) -> JSValue
externC (needContext, triggerGC) getObjectProp: (JSObject, JSValue) -> JSValue
externC (needContext, triggerGC) SetArrayProp: (Array, JSValue, JSValue) -> void
externC (needContext, triggerGC) SetObjectProp: (JSObject, JSValue, JSValue) -> void

externC FIXNUM_LESSTHAN: (Fixnum, Fixnum) -> cint
externC FIXNUM_LESSTHANEQ: (Fixnum, Fixnum) -> cint
externC FIXNUM_EQ: (Fixnum, Fixnum) -> cint
externC FIXNUM_AND: (Fixnum, Fixnum) -> Fixnum
externC FIXNUM_OR: (Fixnum, Fixnum) -> Fixnum

externC Strcmp: (cstring, cstring) -> cint
externC Half_fixnum_range: cint -> cint

externC Get_opcode : void -> cint
externC IsSend : cint -> cint
externC IsTailSend : cint -> cint
externC IsNewSend : cint -> cint
externC (needContext) Set_fp : void -> void
externC (needContext) Set_pc : void -> void
externC (needContext) Try_gc : void -> void
externC (needContext, triggerGC) Call_function : (JSValue, cint, cint) -> void
externC (needContext, triggerGC) Call_builtin : (JSValue, cint, cint, cint) -> void
externC (needContext, triggerGC) Tailcall_function : (JSValue, cint, cint) -> void
externC (needContext, triggerGC) Tailcall_builtin : (JSValue, cint, cint) -> void
externC Next_insn_noincpc : void -> void
externC Next_insn_incpc : void -> void

externC Fixnum_Zero : void -> Fixnum
externC Flonum_Infinity : void -> Flonum
externC Flonum_NegInfinity : void -> Flonum
externC Flonum_Nan : void -> Flonum
externC IsFlonumInfinity: JSValue -> cint
externC IsFlonumNegInfinity : JSValue -> cint
externC IsFlonumNan : JSValue -> cint
externC IsFixnumZero : JSValue -> cint
externC Isobject : JSValue -> JSValue
externC LogicalRightShift : (cint, cint) -> cint

externC Floor : cdouble -> cdouble
externC Ceil : cdouble -> cdouble

externC (needContext, triggerGC) Get_a : void -> JSValue
externC (needContext, triggerGC) Getarguments: (cint, Subscript) -> JSValue
externC (needContext, triggerGC) Get_err : void -> JSValue
externC (needContext, triggerGC) Get_global : JSValue -> JSValue
externC (needContext) Get_globalobj : void -> JSValue
externC (needContext, triggerGC) Getlocal: (cint, Subscript) -> JSValue
externC Instanceof : (JSValue, JSValue) -> JSValue
externC Isundefined : JSValue -> JSValue
externC Jump : Displacement -> void
externC Lcall_stack_push : void -> void
externC Localret : void -> Displacement
externC Save_context : void -> void
externC Update_context : void -> void
externC New_normal_function : Subscript -> JSValue
externC (needContext, triggerGC) New_normal_iterator : JSValue -> JSValue
externC Logexit : cstring -> void
externC type_error : cstring -> void
externC type_error_exception : cstring -> void
externC Nextpropnameidx : JSValue -> JSValue

externC (needContext) New_normal_object : void -> JSObject
externC (needContext) Initialize_new_object : (JSValue, JSValue) -> JSObject
externC JS_undefined : void -> JSObject
externC Newframe : (cint, cint) -> void
externC Makearguments : void -> void

externC Nop : void -> void
externC Not : JSValue -> JSValue
externC Get_literal : cint -> JSValue
externC Pophandler : void -> void
externC Poplocal : void -> void
externC Pushhandler : Displacement -> void
externC Ret : void -> void
externC Set_sp : cint -> void
externC Seta : JSValue -> void
externC Setarg : (cint, Subscript, JSValue) -> void
externC Setarray : (JSValue, Subscript, JSValue) -> void
externC Setfl : cint -> void
externC Setglobal : (JSValue, JSValue) -> void
externC Setlocal : (cint, Subscript, JSValue) -> void
externC (needContext, triggerGC) Throw : void -> void
externC NotImplemented : void -> void

externC (needContext) new_normal_boolean_object : JSValue -> BooleanObject
externC (needContext) new_normal_string_object : JSValue -> StringObject
externC (needContext) new_normal_number_object : JSValue -> NumberObject
externC is_string : JSValue -> cint
externC IsEmptyCstring : cstring -> cint
externC Strtol : (cstring, cstring, cint) -> cint
externC Strtod : (cstring, cstring) -> cdouble
externC is_fixnum_range_cint : cint -> cint
externC get_prop_prototype_chain : (JSValue, JSValue) -> JSValue
externC (needContext) invoke_function0 : (JSValue, JSValue, cint) -> JSValue
externC (needContext) invoke_builtin0 : (JSValue, JSValue, cint) -> JSValue
//externC GC_PUSH : JSValue -> void
//externC GC_POP : JSValue -> void
externC false_true : cint -> Special

externC isnan : cdouble -> cint
externC isinf : cdouble -> cint
externC GetProp : (JSValue, JSValue, JSValue) -> cint
externC (needContext) print_value_simple : JSValue -> void
externC PutLnChar : void -> void
externC (needContext) AllocateJSArray : cint -> JSValue[]
externC AllocateCintArray : cint -> cint[]
externC AllocateCdoubleArray : cint -> cdouble[]

#include "../header-vmdl/funcs-vmdl.vmdh"

#include "../header-vmdl/mappings.vmdh"