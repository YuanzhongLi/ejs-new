#include "patterns.vmdh"

#include "externc.vmdh"

(vmInstruction, needContext, triggerGC, tailCall)
div : (JSValue, JSValue) -> JSValue
div (v1, v2) {
  top: match (v1, v2) {
    case (Fixnum v1 && Fixnum v2) {
      cint n1 = FixnumToCint(v1);
      if (IsFixnumZero(v2)) {
          if (n1 > 0) {
              return Flonum_Infinity();
          } else if (n1 == 0) {
              return Flonum_Nan();
          } else {
              return Flonum_NegInfinity();
          }
      } else {
        cint n2 = FixnumToCint(v2);
        cint s = n1 / n2;
        return (n1 == n2 * s) ? CintToFixnum(s) : CdoubleToFlonum(FixnumToCdouble(v1) / FixnumToCdouble(v2));
      }
    }
    case (Fixnum v1 && Flonum v2 || Flonum v1 && Fixnum v2 || Flonum v1 && Flonum v2) {
      cdouble x1 = toCdouble(v1);
      cdouble x2 = toCdouble(v2);
      cdouble d = x1 / x2;
      if (IsFlonumInfinity(CdoubleToFlonum(d))) {
          return d > 0.0 ? Flonum_Infinity() : Flonum_NegInfinity();
      } else if (IsFlonumNan(CdoubleToFlonum(d))) {
          return Flonum_Nan();
      } else {
          return CdoubleToNumber(d);
      }
    }
    case (number v1) {
        Number u2 = toNumber(v2);
        rematch top(v1, u2);
    }
    case (number v2) {
        Number u1 = toNumber(v1);
        rematch top(u1, v2);
    }
    case (true) {
      Number u1 = toNumber(v1);
      Number u2 = toNumber(v2);
      rematch top(u1, u2);
    }
  }
}